// Generated by view binder compiler. Do not edit!
package com.kamui.fooddonation.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.kamui.fooddonation.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button claimButton;

  @NonNull
  public final TextView claimedBy;

  @NonNull
  public final TextView distance;

  @NonNull
  public final TextView donationDestAddress;

  @NonNull
  public final TextView donationFoodName;

  @NonNull
  public final TextView donationPickupAddress;

  @NonNull
  public final TextView donationStatus;

  @NonNull
  public final TextView donorName;

  @NonNull
  public final TextView expiryDate;

  @NonNull
  public final TextView foodQuantity;

  @NonNull
  public final TextView foodType;

  @NonNull
  public final TextView receiverName;

  @NonNull
  public final Button trackButton;

  private ListItemBinding(@NonNull LinearLayout rootView, @NonNull Button claimButton,
      @NonNull TextView claimedBy, @NonNull TextView distance,
      @NonNull TextView donationDestAddress, @NonNull TextView donationFoodName,
      @NonNull TextView donationPickupAddress, @NonNull TextView donationStatus,
      @NonNull TextView donorName, @NonNull TextView expiryDate, @NonNull TextView foodQuantity,
      @NonNull TextView foodType, @NonNull TextView receiverName, @NonNull Button trackButton) {
    this.rootView = rootView;
    this.claimButton = claimButton;
    this.claimedBy = claimedBy;
    this.distance = distance;
    this.donationDestAddress = donationDestAddress;
    this.donationFoodName = donationFoodName;
    this.donationPickupAddress = donationPickupAddress;
    this.donationStatus = donationStatus;
    this.donorName = donorName;
    this.expiryDate = expiryDate;
    this.foodQuantity = foodQuantity;
    this.foodType = foodType;
    this.receiverName = receiverName;
    this.trackButton = trackButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.claim_button;
      Button claimButton = ViewBindings.findChildViewById(rootView, id);
      if (claimButton == null) {
        break missingId;
      }

      id = R.id.claimed_by;
      TextView claimedBy = ViewBindings.findChildViewById(rootView, id);
      if (claimedBy == null) {
        break missingId;
      }

      id = R.id.distance;
      TextView distance = ViewBindings.findChildViewById(rootView, id);
      if (distance == null) {
        break missingId;
      }

      id = R.id.donation_dest_address;
      TextView donationDestAddress = ViewBindings.findChildViewById(rootView, id);
      if (donationDestAddress == null) {
        break missingId;
      }

      id = R.id.donation_food_name;
      TextView donationFoodName = ViewBindings.findChildViewById(rootView, id);
      if (donationFoodName == null) {
        break missingId;
      }

      id = R.id.donation_pickup_address;
      TextView donationPickupAddress = ViewBindings.findChildViewById(rootView, id);
      if (donationPickupAddress == null) {
        break missingId;
      }

      id = R.id.donation_status;
      TextView donationStatus = ViewBindings.findChildViewById(rootView, id);
      if (donationStatus == null) {
        break missingId;
      }

      id = R.id.donor_name;
      TextView donorName = ViewBindings.findChildViewById(rootView, id);
      if (donorName == null) {
        break missingId;
      }

      id = R.id.expiryDate;
      TextView expiryDate = ViewBindings.findChildViewById(rootView, id);
      if (expiryDate == null) {
        break missingId;
      }

      id = R.id.food_quantity;
      TextView foodQuantity = ViewBindings.findChildViewById(rootView, id);
      if (foodQuantity == null) {
        break missingId;
      }

      id = R.id.food_type;
      TextView foodType = ViewBindings.findChildViewById(rootView, id);
      if (foodType == null) {
        break missingId;
      }

      id = R.id.receiver_name;
      TextView receiverName = ViewBindings.findChildViewById(rootView, id);
      if (receiverName == null) {
        break missingId;
      }

      id = R.id.track_button;
      Button trackButton = ViewBindings.findChildViewById(rootView, id);
      if (trackButton == null) {
        break missingId;
      }

      return new ListItemBinding((LinearLayout) rootView, claimButton, claimedBy, distance,
          donationDestAddress, donationFoodName, donationPickupAddress, donationStatus, donorName,
          expiryDate, foodQuantity, foodType, receiverName, trackButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
